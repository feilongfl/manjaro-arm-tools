#! /bin/bash

# Set globals
LIBDIR=/usr/share/manjaro-arm-tools/lib
ARCH="aarch64"

#imports
source $LIBDIR/functions.sh 

# check if root
if [ "$EUID" -ne 0 ]
  then echo "This script requires root permissions to run. Please run as root or with sudo!"
  exit
fi

# Functions

create_rootfs () {
    msg "Creating rootfs..."
    # backup host mirrorlist
    mv /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist-orig

    # Create arm mirrorlist
    echo "Server = http://manjaro-arm.moson.eu/stable/\$arch/\$repo/" > mirrorlist
    mv mirrorlist /etc/pacman.d/mirrorlist
    
    # Remove old rootfs if it exists
    if [ -d $BUILDDIR/$ARCH ]; then
    echo "Removing old rootfs..."
    rm -rf $BUILDDIR/$ARCH
    fi

    # cd to root_fs
    mkdir -p $BUILDDIR/$ARCH

    # basescrap the rootfs filesystem
    pacstrap -G -c -C $LIBDIR/pacman.conf.$ARCH $BUILDDIR/$ARCH pacman

    # Enable cross architecture Chrooting
    if [[ "$ARCH" = "aarch64" ]]; then
        cp /usr/bin/qemu-aarch64-static $BUILDDIR/$ARCH/usr/bin/
    else
        cp /usr/bin/qemu-arm-static $BUILDDIR/$ARCH/usr/bin/
    fi
    
    # fix SSL in the rootfs
    rm -f $BUILDDIR/$ARCH/etc/ssl/certs/ca-certificates.crt
    rm -f $BUILDDIR/$ARCH/etc/ca-certificates/extracted/tls-ca-bundle.pem
    cp -a /etc/ssl/certs/ca-certificates.crt $BUILDDIR/$ARCH/etc/ssl/certs/
    cp -a /etc/ca-certificates/extracted/tls-ca-bundle.pem $BUILDDIR/$ARCH/etc/ca-certificates/extracted/
    
    # restore original mirrorlist to host system
    mv /etc/pacman.d/mirrorlist-orig /etc/pacman.d/mirrorlist
    pacman -Syy
}

compress_rootfs () {
    msg "Compressing rootfs..."
    cd $BUILDDIR/$ARCH
    tar -czf $IMGDIR/Manjaro-ARM-$ARCH-latest.tar.gz .
    rm -rf $BUILDDIR/$ARCH
    
}

#Arguments 
opt=":a:h"

while getopts "${opt}" arg; do
  case $arg in
    a)
      ARCH="${OPTARG}"
      ;;
    \?)
      echo "Invalid option: -${OPTARG}"
      exit 1
      ;;
    h|?)
      echo "-a <arch>       Architecture"
      echo "-h <help>       This help"
      exit 1
      ;;
    :)
      echo "Option -${OPTARG} requires an argument."
      exit 1
      ;;
  esac
done

# Commands
create_rootfs
compress_rootfs
